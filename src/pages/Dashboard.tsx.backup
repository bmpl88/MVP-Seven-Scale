import React, { useEffect, useState } from 'react';
import { 
  Users, 
  Bell, 
  Clock,
  CheckCircle,
  AlertTriangle,
  Eye,
  RefreshCw
} from 'lucide-react';
import { useDashboardContext } from '../context/DashboardContext';
import { dashboardApi } from '../services/api';

export default function Dashboard() {
  const { 
    overview, 
    clientPerformance, 
    agentStatus,
    agentStatusLoading,
    loadOverview, 
    loadClientPerformance,
    loadAgentStatus,
    loading 
  } = useDashboardContext();
  
  const [clientsData, setClientsData] = useState<any[]>([]);
  const [alerts, setAlerts] = useState<any[]>([]);
  const [alertsLoading, setAlertsLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState<any>(null);
  const [lastUpdateLoading, setLastUpdateLoading] = useState(false);
  
  // Carregar alertas do backend
  const loadAlerts = async () => {
    try {
      setAlertsLoading(true);
      const alertsData = await dashboardApi.getAlerts();
      setAlerts(alertsData || []);
      console.log('✅ Alertas carregados:', alertsData);
    } catch (error) {
      console.error('❌ Erro ao carregar alertas:', error);
      setAlerts([]);
    } finally {
      setAlertsLoading(false);
    }
  };

  // Carregar última atualização do backend
  const loadLastUpdate = async () => {
    try {
      setLastUpdateLoading(true);
      const activity = await dashboardApi.getRecentActivity(1);
      if (activity && activity.length > 0) {
        const lastActivity = activity[0];
        const lastUpdateTime = new Date(lastActivity.created_at);
        const timeDiff = Date.now() - lastUpdateTime.getTime();
        const hoursDiff = timeDiff / (1000 * 60 * 60);
        
        let timeAgo;
        if (hoursDiff < 1) {
          timeAgo = `Há ${Math.round(hoursDiff * 60)} min`;
        } else if (hoursDiff < 24) {
          timeAgo = `Há ${Math.round(hoursDiff)} horas`;
        } else {
          timeAgo = `Há ${Math.round(hoursDiff / 24)} dias`;
        }
        
        // Calcular próxima atualização (próxima execução do agente)
        const nextUpdate = new Date(lastUpdateTime.getTime() + 2 * 60 * 60 * 1000); // +2h
        const timeToNext = nextUpdate.getTime() - Date.now();
        let nextText = 'Agora';
        
        if (timeToNext > 0) {
          const minutesToNext = Math.round(timeToNext / (1000 * 60));
          if (minutesToNext < 60) {
            nextText = `${minutesToNext}min`;
          } else {
            nextText = `${Math.round(minutesToNext / 60)}h`;
          }
        }
        
        setLastUpdate({
          timeAgo,
          nextUpdate: nextText,
          activity: lastActivity
        });
      } else {
        setLastUpdate({
          timeAgo: 'Nunca',
          nextUpdate: 'Aguardando',
          activity: null
        });
      }
      console.log('✅ Última atualização carregada:', activity);
    } catch (error) {
      console.error('❌ Erro ao carregar última atualização:', error);
      setLastUpdate({
        timeAgo: 'Erro',
        nextUpdate: 'Aguardando',
        activity: null
      });
    } finally {
      setLastUpdateLoading(false);
    }
  };

  // Carregar dados ao montar o componente
  useEffect(() => {
    loadOverview();
    loadClientPerformance();
    loadAlerts();
    loadLastUpdate();
  }, [loadOverview, loadClientPerformance]);
  
  // Processar dados dos clientes
  useEffect(() => {
    if (clientPerformance && clientPerformance.length > 0) {
      const processedClients = clientPerformance.map(client => {
        return {
          id: client.id,
          name: client.name,
          specialty: client.specialty,
          status: client.status === 'operational' ? 'Ativo' : 'Inativo',
          lastSync: Math.floor(Math.random() * 8) + 1 + 'h atrás'
        };
      });
      
      setClientsData(processedClients);
    }
  }, [clientPerformance]);

  if (loading && !overview) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-8 py-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
            <p className="text-gray-600">Visão geral da plataforma SevenScale</p>
          </div>
          
          <div className="flex items-center gap-4">
            <button 
              onClick={() => {
                loadOverview();
                loadClientPerformance();
                loadAgentStatus();
                loadAlerts();
                loadLastUpdate();
              }}
              disabled={loading || agentStatusLoading || alertsLoading || lastUpdateLoading}
              className="flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <RefreshCw className={`w-4 h-4 ${(loading || agentStatusLoading || alertsLoading || lastUpdateLoading) ? 'animate-spin' : ''}`} />
              Atualizar
            </button>
          </div>
        </div>
      </header>
      
      <main className="p-8">
        {/* Métricas Principais */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <p className="text-gray-600 text-sm font-medium mb-1">Clientes Ativos</p>
                <p className="text-3xl font-bold text-gray-900 mb-1">{overview?.total_clients || 8}</p>
                <p className="text-gray-500 text-sm mb-3">
                  {overview?.operational_clients || 7} OK, {overview?.attention_clients || 1} atenção
                </p>
              </div>
              <div className="p-3 rounded-lg bg-blue-100">
                <Users className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <p className="text-gray-600 text-sm font-medium">Status Agente</p>
                  {agentStatusLoading && (
                    <div className="w-3 h-3 rounded-full border border-gray-300 border-t-blue-600 animate-spin"></div>
                  )}
                </div>
                <p className="text-xl font-bold text-gray-900 mb-1">
                  {agentStatus?.statusText || 'Carregando...'}
                </p>
                <p className="text-gray-500 text-sm mb-3">
                  {agentStatus?.lastSync ? `Última sync: ${agentStatus.lastSync}` : 'Aguardando dados'}
                </p>
                {agentStatus?.nextSync && (
                  <p className="text-xs text-gray-400">
                    Próxima: {agentStatus.nextSync}
                  </p>
                )}
              </div>
              <div className={`p-3 rounded-lg ${
                agentStatus?.status === 'active' ? 'bg-green-100' :
                agentStatus?.status === 'processing' ? 'bg-purple-100' :
                agentStatus?.status === 'attention' ? 'bg-amber-100' :
                'bg-gray-100'
              }`}>
                {agentStatus?.status === 'processing' ? (
                  <Clock className={`w-6 h-6 ${
                    agentStatus?.status === 'active' ? 'text-green-600' :
                    agentStatus?.status === 'processing' ? 'text-purple-600 animate-pulse' :
                    agentStatus?.status === 'attention' ? 'text-amber-600' :
                    'text-gray-600'
                  }`} />
                ) : agentStatus?.status === 'active' ? (
                  <CheckCircle className="w-6 h-6 text-green-600" />
                ) : agentStatus?.status === 'attention' ? (
                  <AlertTriangle className="w-6 h-6 text-amber-600" />
                ) : (
                  <Clock className="w-6 h-6 text-gray-600" />
                )}
              </div>
            </div>
            {agentStatus?.performance && agentStatus.performance > 0 && (
              <div className="mt-3 pt-3 border-t border-gray-100">
                <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                  <span>Performance</span>
                  <span>{agentStatus.performance}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-1.5">
                  <div 
                    className={`h-1.5 rounded-full ${
                      agentStatus.performance >= 90 ? 'bg-green-500' :
                      agentStatus.performance >= 70 ? 'bg-blue-500' :
                      agentStatus.performance >= 50 ? 'bg-amber-500' :
                      'bg-red-500'
                    }`}
                    style={{ width: `${agentStatus.performance}%` }}
                  ></div>
                </div>
              </div>
            )}
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <p className="text-gray-600 text-sm font-medium">Última Atualização</p>
                  {lastUpdateLoading && (
                    <div className="w-3 h-3 rounded-full border border-gray-300 border-t-blue-600 animate-spin"></div>
                  )}
                </div>
                <p className="text-xl font-bold text-gray-900 mb-1">
                  {lastUpdate?.timeAgo || 'Carregando...'}
                </p>
                <p className="text-gray-500 text-sm mb-3">
                  Próxima: {lastUpdate?.nextUpdate || 'Aguardando'}
                </p>
              </div>
              <div className={`p-3 rounded-lg ${
                lastUpdate?.timeAgo && !lastUpdate.timeAgo.includes('Erro') && !lastUpdate.timeAgo.includes('Nunca') 
                  ? 'bg-green-100' 
                  : 'bg-gray-100'
              }`}>
                <CheckCircle className={`w-6 h-6 ${
                  lastUpdate?.timeAgo && !lastUpdate.timeAgo.includes('Erro') && !lastUpdate.timeAgo.includes('Nunca')
                    ? 'text-green-600'
                    : 'text-gray-600'
                }`} />
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <p className="text-gray-600 text-sm font-medium">Alertas</p>
                  {alertsLoading && (
                    <div className="w-3 h-3 rounded-full border border-gray-300 border-t-blue-600 animate-spin"></div>
                  )}
                </div>
                <p className="text-3xl font-bold text-gray-900 mb-1">
                  {alertsLoading ? '...' : (alerts?.length || 0)}
                </p>
                <p className="text-gray-500 text-sm mb-3">
                  {alerts?.length > 0 ? 'Requerem atenção' : 'Nenhum alerta'}
                </p>
              </div>
              <div className={`p-3 rounded-lg ${
                alerts?.length > 0 ? 'bg-amber-100' : 'bg-green-100'
              }`}>
                <Bell className={`w-6 h-6 ${
                  alerts?.length > 0 ? 'text-amber-600' : 'text-green-600'
                }`} />
              </div>
            </div>
          </div>
        </div>

        {/* Lista de Clientes */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-gray-900">Clientes Ativos</h3>
            <div className="text-sm text-gray-500">Total: {clientsData.length}</div>
          </div>

          <div className="space-y-4">
            {clientsData.map((client, index) => (
              <div key={index} className="flex items-center justify-between p-4 rounded-lg border border-gray-200 hover:shadow-md transition-shadow">
                <div className="flex items-center gap-4">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: client.status === 'Ativo' ? '#10b981' : '#f59e0b' }}
                  />
                  <div>
                    <h4 className="font-semibold text-gray-900">{client.name}</h4>
                    <p className="text-gray-600 text-sm">{client.specialty}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-6">
                  <div className="text-center">
                    <p className="text-sm text-gray-600">Status</p>
                    <p className="font-semibold text-gray-900">{client.status}</p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-gray-600">Última sync</p>
                    <p className="text-gray-500 text-sm">{client.lastSync}</p>
                  </div>
                  
                  <button className="p-2 rounded-lg hover:bg-gray-100 transition-colors">
                    <Eye className="w-4 h-4 text-gray-500" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Alertas */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-gray-900">Alertas Recentes</h3>
            <button 
              onClick={loadAlerts}
              disabled={alertsLoading}
              className="p-2 rounded-lg hover:bg-gray-100 transition-colors disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 text-gray-500 ${alertsLoading ? 'animate-spin' : ''}`} />
            </button>
          </div>

          <div className="space-y-4">
            {alertsLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-blue-600"></div>
                <span className="ml-2 text-gray-600">Carregando alertas...</span>
              </div>
            ) : alerts && alerts.length > 0 ? (
              alerts.slice(0, 3).map((alert, index) => {
                const isWarning = alert.log_type === 'warning';
                const isCritical = alert.log_type === 'critical';
                const timeAgo = new Date(alert.created_at);
                const timeDiff = Date.now() - timeAgo.getTime();
                const hoursDiff = timeDiff / (1000 * 60 * 60);
                
                let timeAgoText;
                if (hoursDiff < 1) {
                  timeAgoText = `${Math.round(hoursDiff * 60)} min atrás`;
                } else if (hoursDiff < 24) {
                  timeAgoText = `${Math.round(hoursDiff)} horas atrás`;
                } else {
                  timeAgoText = `${Math.round(hoursDiff / 24)} dias atrás`;
                }
                
                return (
                  <div 
                    key={index} 
                    className={`p-4 rounded-lg border ${
                      isCritical 
                        ? 'border-red-200 bg-red-50' 
                        : isWarning 
                        ? 'border-amber-200 bg-amber-50'
                        : 'border-blue-200 bg-blue-50'
                    }`}
                  >
                    <div className="flex items-start gap-3 mb-2">
                      <AlertTriangle className={`w-5 h-5 flex-shrink-0 mt-0.5 ${
                        isCritical 
                          ? 'text-red-600' 
                          : isWarning 
                          ? 'text-amber-600'
                          : 'text-blue-600'
                      }`} />
                      <div>
                        <h4 className="font-semibold text-gray-900">
                          {alert.action || 'Alerta do Sistema'}
                        </h4>
                        <p className="text-gray-700 text-sm">
                          {alert.details || alert.message || 'Sem detalhes disponíveis'}
                        </p>
                      </div>
                    </div>
                    <p className="text-gray-500 text-xs ml-8">{timeAgoText}</p>
                  </div>
                );
              })
            ) : (
              <div className="text-center py-8">
                <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-2" />
                <p className="text-gray-600">Nenhum alerta ativo</p>
                <p className="text-gray-500 text-sm">Sistema funcionando normalmente</p>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}